spring.application.name=one
#热部署生效
spring.devtools.restart.enabled:true
#自定认配置
com.hui.title=纯结的微笑
com.hui.description=生活和技术
#log配置
#path 为本机的 log 地址，
logging.file.path=G:\workspace\idea-workspace\springboot\one\log
#logging.level 后面可以根据包路径配置不同资源的 log 级别
logging.level.com.hui.springboot.one.conf=DEBUG
logging.level.com.hui.springboot.one.controller=INFO
logging.level.com.hui.springboot.one.http=ERROR
#数据库配置
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/test
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#其实这个 hibernate.hbm2ddl.auto 参数的作用主要用于：自动创建	更新	验证数据库表结构,有四个值：
#create： 每次加载 hibernate 时都会删除上一次的生成的表，然后根据你的 model 类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。
#create-drop ：每次加载 hibernate 时根据 model 类生成表，但是 sessionFactory 一关闭,表就自动删除。
#update：最常用的属性，第一次加载 hibernate 时根据 model 类会自动建立起表的结构（前提是先建立好数据库），以后加载 hibernate 时根据 model 类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等 应用第一次运行起来后才会。
#validate ：每次加载 hibernate 时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值。
spring.jpa.properties.hibernate.hbm2ddl.auto=update
#dialect 主要是指定生成表名的存储引擎为 InnoDBD
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
spring.jpa.show-sql=true
#集成redis配置开始
# Redis数据库索引（默认为0）
spring.redis.database=0  
# Redis服务器地址
spring.redis.host=localhost
# Redis服务器连接端口
spring.redis.port=6379  
# Redis服务器连接密码（默认为空）
spring.redis.password=
# 连接池最大连接数（使用负值表示没有限制） 默认 8
spring.redis.lettuce.pool.max-active=8
# 连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1
spring.redis.lettuce.pool.max-wait=-1
# 连接池中的最大空闲连接 默认 8
spring.redis.lettuce.pool.max-idle=8
# 连接池中的最小空闲连接 默认 0
spring.redis.lettuce.pool.min-idle=0
#集成redis配置结束
mybatis.type-aliases-package=com.hui.springboot.one.entity
mybatis.config-location=classpath:mybatis/mybatis-config.xml
mybatis.mapper-locations=classpath:mybatis/mapper/*.xml
#多数据源
spring.datasource.test1.driverClassName=com.mysql.cj.jdbc.Driver
spring.datasource.test1.jdbcUrl=jdbc:mysql://127.0.0.1:3306/test
spring.datasource.test1.username=root
spring.datasource.test1.password=root
spring.datasource.test2.driverClassName=com.mysql.cj.jdbc.Driver
spring.datasource.test2.jdbcUrl=jdbc:mysql://127.0.0.1:3306/test
spring.datasource.test2.username=root
spring.datasource.test2.password=root
#多数据源 end
#rabbitmq 配置
spring.rabbitmq.host=127.0.0.1
spring.rabbitmq.prot=5672
spring.rabbitmq.username=root
spring.rabbitmq.password=root
#rabbitmq 配置 end


